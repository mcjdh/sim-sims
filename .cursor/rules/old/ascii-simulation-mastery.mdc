---
description: 
globs: 
alwaysApply: false
---
# ASCII Simulation Mastery Guide

## Philosophy: Breathing Digital Life from Mathematical Simplicity

Create **minimal code that generates profound, living experiences** following the patterns established in simple-sims. Every simulation should demonstrate how **simple mathematical rules create complex, unpredictable beauty**.

### üåä Core Mathematical Principles

**Living Mathematics**: Build on mathematical foundations that create **interference, emergence, and flow**:
- Wave equations with multiple sources: [waves.html](mdc:gen1/waves.html) shows perfect 3-source interference
- Fractal mathematics (Mandelbrot-style): [flow.html](mdc:gen1/flow.html) demonstrates complex plane evolution
- Field equations simulating forces: [attention.html](mdc:gen1/attention.html) shows neural field dynamics
- Probabilistic systems: [probability-gardens.html](mdc:gen5/probability-gardens.html) demonstrates quantum uncertainty

**Memory Persistence**: Create organic trails through weighted averaging:
```javascript
field[idx] = field[idx] * 0.85 + newValue * 0.15;  // Creates organic decay
memory[idx] = memory[idx] * 0.87 + intensity * 0.13; // Neural persistence
```

**Global Breathing**: Add universal pulsing that makes everything feel alive:
```javascript
const breath = Math.sin(time * 0.003) * 0.3 + 0.7;
const cognitiveRhythm = Math.sin(time * 0.004) * 0.2 + 0.8;
intensity *= breath;
```

### üé® Aesthetic Principles

**Symbol Hierarchies**: Choose symbols forming natural progression from void to intensity:
- **Minimal**: `' .¬∑¬∞'` (sparse, meditative)
- **Mathematical**: `' ¬∑‚àò‚óã‚óØ‚óè‚óâ'` (geometric progression) - see [waves.html](mdc:gen1/waves.html)
- **Dense**: `' .-:+*%@#‚ñà'` (classic ASCII art)
- **Conceptual**: Unicode sets for specific meanings (‚¨¢‚¨°‚¨£ for crystals, ‚óÜ‚óá‚óà for flow)

**Terminal Zen**:
- Black background, white/colored text, monospace font
- No UI elements - pure content immersion
- Font sizes 8-12px for detail resolution
- Line spacing 0.9-1.0 for density

### üî¨ Technical Architecture

**Core Structure** (Reference [flow.html](mdc:gen1/flow.html) for complete pattern):
```javascript
const W = 120, H = 60;  // Canvas dimensions
let time = 0;           // Global time counter
let field = new Array(W * H).fill(0);  // Main data field
let memory = new Array(W * H).fill(0); // Persistence layer

function render() {
    // 1. Update all field positions
    // 2. Apply interference patterns  
    // 3. Add memory persistence
    // 4. Map to symbols
    // 5. Output to DOM
}

function evolve() {
    render();
    requestAnimationFrame(evolve);  // Smooth 60fps
}
```

**Multi-Layer Interference**: Combine 3-5 different mathematical systems:
- **Base layer**: Primary mathematical concept (waves, fractals, particles)
- **Modulation layer**: Secondary effects that modify the base
- **Temporal layer**: Time-based evolution and breathing
- **Chaos layer**: Small random elements for organic feel
- **Memory layer**: Persistence and trail effects

### ‚ú® The Secret: Emergent Simplicity

The magic happens when **simple mathematical rules create complex, unpredictable beauty**. Each line of code should contribute to a system where the whole becomes greater than the sum of its parts.

**Key Reference Examples**:
- [waves.html](mdc:gen1/waves.html) - Pure wave interference elegance
- [flow.html](mdc:gen1/flow.html) - Multi-layered mathematical complexity  
- [attention.html](mdc:gen1/attention.html) - Cognitive emergence simulation
- [probability-gardens.html](mdc:gen5/probability-gardens.html) - Quantum ecology

Remember: **Complexity emerges from simplicity, not the other way around.**

