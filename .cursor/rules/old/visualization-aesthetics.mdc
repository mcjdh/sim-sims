---
description: 
globs: 
alwaysApply: false
---
# Visualization Aesthetics for Living Simulations

## 🎨 Symbol Systems and Character Progressions

### Mathematical Symbol Hierarchies

**Sparse/Minimal** (For meditative, wave-like simulations):
```javascript
const minimal = ' .·°';
const sparse = ' .·°∘○';
```

**Geometric Progression** (Perfect for wave interference like [waves.html](mdc:gen1/waves.html)):
```javascript
const geometric = ' .·°∘○◯●◉■';
const mathematical = ' ·∘○◯●◉⊙⊚⊛⊜';
```

**Dense ASCII** (For complex multi-layer systems):
```javascript
const dense = ' .-:+*%@#█';
const complex = ' .·°∘○◯●◉⊙⊚⊛⊜⊝⊞⊟⊠⊡■□▪▫▬▭▮▯▰▱';
```

**Conceptual Unicode** (Theme-specific symbols):
```javascript
// Crystal formations (temporal-crystals.html style)
const crystals = ' ·∘○◯⬢⬡⬣⬢⟐⬟⊠⊡◉❋';

// Flow and movement
const flow = ' .·°∘○◯●◉▲△▴▵▶▷▸▹►▻';

// Probability and quantum
const quantum = ' ·∘○◯⚬⚭⚮⚯⛤⛥⛦⛧⛨⛩⛪⛫⛬⛭⛮⛯⛰⛱⚘❀❁❂❃❄❅❆❇❈❉❊❋';

// Neural/cognitive
const neural = ' .·°∘○◯●◉⊙⊚⊛⊜⊝⊞⊟⊠⊡■□▪▫▬▭▮▯▰▱▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◆◇◈◊◌◍◎◐◑◒◓◔◕◖◗◘◙◚◛◜◝◞◟◠◡◢◣◤◥◦◧◨◩◪◫◬◭◮◯◰◱◲◳◴◵◶◷◸◹◺◻◼◽◾◿⬢⬣⬡⬠⬟⬞⬝⬜⬛█';
```

### Color Palettes and Visual Themes

**Terminal Zen** (Reference [flow.html](mdc:gen1/flow.html) styling):
```css
body {
    background: #000;           /* Pure black background */
    color: #fff;               /* White text for contrast */
    font-family: 'Courier New', monospace;
    font-size: 8px;            /* Small for detail resolution */
    line-height: 0.9;          /* Tight spacing for density */
    letter-spacing: 0px;       /* No letter spacing */
    overflow: hidden;          /* No scrollbars */
}
```

**Themed Color Variations**:
```css
/* Quantum/probability theme */
color: #aaffaa;  /* Soft green - probability-gardens.html */

/* Temporal/crystal theme */
color: #88aaff;  /* Soft blue - temporal-crystals.html */

/* Neural/cognitive theme */
color: #ffaa88;  /* Soft orange for attention simulations */

/* Flow/mathematical theme */
color: #fff;     /* Pure white for mathematical clarity */
```

### Canvas Sizing and Layout

**Optimal Dimensions** (Based on screen ergonomics and complexity):
```javascript
// Standard sizes from the codebase
const small = { W: 90, H: 45 };   // waves.html - minimal complexity
const medium = { W: 125, H: 60 }; // attention.html - moderate complexity  
const large = { W: 140, H: 65 };  // flow.html - high complexity
const wide = { W: 135, H: 65 };   // probability-gardens.html - landscape
```

**Responsive Canvas Setup**:
```css
#canvas {
    white-space: pre;
    font-feature-settings: 'kern' 0;  /* Disable font kerning */
    font-variant-ligatures: none;     /* Disable ligatures */
    width: fit-content;
    height: fit-content;
}
```

## 🌈 Intensity Mapping and Normalization

### Mathematical Intensity Normalization

**Standard Normalization Pattern** (Universal across all simulations):
```javascript
function normalizeIntensity(rawIntensity, minVal = -2, maxVal = 2) {
    // Clamp to reasonable range
    const clamped = Math.max(minVal, Math.min(maxVal, rawIntensity));
    
    // Normalize to 0-1 range
    const normalized = (clamped - minVal) / (maxVal - minVal);
    
    // Ensure we stay within symbol array bounds
    return Math.max(0, Math.min(0.99, normalized));
}

function mapToSymbol(intensity, symbols) {
    const normalized = normalizeIntensity(intensity);
    const index = Math.floor(normalized * symbols.length);
    return symbols[index];
}
```

**Breathing and Global Modulation** (Essential for life-like feel):
```javascript
function applyBreathing(intensity, time, frequency = 0.003, amplitude = 0.3) {
    const breath = Math.sin(time * frequency) * amplitude + (1 - amplitude);
    return intensity * breath;
}

function applyGlobalRhythm(intensity, time) {
    // Multiple breathing frequencies for organic complexity
    const breath1 = Math.sin(time * 0.003) * 0.2 + 0.8;
    const breath2 = Math.sin(time * 0.005) * 0.1 + 0.9;
    const breath3 = Math.sin(time * 0.001) * 0.15 + 0.85;
    
    return intensity * breath1 * breath2 * breath3;
}
```

## 🎭 Thematic Visual Coherence

### Physical/Wave Themes
- **Symbols**: Geometric progression ` .·°∘○◯●◉`
- **Colors**: Pure white on black
- **Movement**: Flowing, wave-like interference
- **Example**: [waves.html](mdc:gen1/waves.html)

### Cognitive/Neural Themes  
- **Symbols**: Dense unicode tokens for information flow
- **Colors**: Warm tones (#ffaa88) suggesting neural activity
- **Movement**: Pulsing attention heads, context windows
- **Example**: [attention.html](mdc:gen1/attention.html)

### Quantum/Probability Themes
- **Symbols**: Botanical/crystalline unicode ⚘❀❂❃
- **Colors**: Soft green (#aaffaa) suggesting life/growth
- **Movement**: Branching, organic growth patterns
- **Example**: [probability-gardens.html](mdc:gen5/probability-gardens.html)

### Temporal/Crystal Themes
- **Symbols**: Crystalline structures ⬢⬡⬣⟐⬟
- **Colors**: Cool blue (#88aaff) suggesting time/space
- **Movement**: Symmetrical growth, phase transitions
- **Example**: [temporal-crystals.html](mdc:gen5/temporal-crystals.html)

## 🔧 Technical Rendering Optimizations

### Efficient String Building
```javascript
function render() {
    let output = '';
    for (let y = 0; y < H; y++) {
        for (let x = 0; x < W; x++) {
            const idx = y * W + x;
            const intensity = field[idx];
            output += mapToSymbol(intensity, symbols);
        }
        output += '\n';
    }
    
    document.getElementById('canvas').textContent = output;
}
```

### Smooth Animation Timing
```javascript
function evolve() {
    render();
    requestAnimationFrame(evolve);  // Smooth 60fps
}

// Alternative for slower, more meditative pace
function evolveSlowly() {
    render();
    setTimeout(evolveSlowly, 33);  // ~30fps for contemplative feel
}
```

### Memory-Efficient Field Updates
```javascript
// Pre-allocate arrays once
let field = new Array(W * H).fill(0);
let memory = new Array(W * H).fill(0);

// Update in-place to avoid garbage collection
function updateField() {
    for (let i = 0; i < field.length; i++) {
        // Calculate new intensity
        const newIntensity = calculateIntensity(i);
        
        // Update with memory persistence
        field[i] = field[i] * 0.87 + newIntensity * 0.13;
    }
}
```

The key is **aesthetic coherence**: every visual choice should reinforce the conceptual theme while maintaining the mathematical foundation that creates the living quality.

